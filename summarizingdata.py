# -*- coding: utf-8 -*-
"""SummarizingData

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QDnvFyEGCns4wdGD610P5015wt8tMFpN
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

!pip install nhanes
from nhanes.load import load_NHANES_data
nhanes_data = load_NHANES_data()

!pip install nhanes

from nhanes.load import load_NHANES_data, load_NHANES_metadata

data_df = load_NHANES_data(year='2017-2018')
metadata_df = load_NHANES_metadata(year='2017-2018')

from nhanes.load import load_NHANES_data
nhanes_data = load_NHANES_data()

nhanes_data.head()

nhanes_data.shape

nhanes_data.columns

my_subset = nhanes_data.loc[[93703, 93808, 102951,102955,93707], ['GeneralHealthCondition', 'AgeStoppedBreastfeedingdays','AgeInYearsAtScreening']]
my_subset.dropna()

my_subset = nhanes_data.loc[[93703, 93808, 102951,102955,93707], ['Gender']]
my_subset

over_50_df = nhanes_data.query('AgeInYearsAtScreening > = 50')
over_50_df.shape

over_50_df.head()

good_health_df = nhanes_data.query('GeneralHealthCondition == ""')
good_health_df.shape

nhanes_data['WeightLbs'] = nhanes_data['WeightKg'] * 2.205

nhanes_data['Gender'].unique()

nhanes_data['GeneralHealthConditionRevised'] = nhanes_data['GeneralHealthCondition'].replace({np.nan : 'None'})
nhanes_data['GeneralHealthConditionRevised'].unique()

from nhanes.load import open_variable_page
open_variable_page('GeneralHealthCondition')

nhanes_data['GeneralHealthCondition'].value_counts()

GeneralHealthCondition_frequency_dist = nhanes_data['GeneralHealthCondition'].value_counts()

GeneralHealthCondition_frequency_dist * 100/ GeneralHealthCondition_frequency_dist.sum()

nhanes_data['GeneralHealthConditionFixed'] = nhanes_data['GeneralHealthCondition'].replace({np.nan : 'None', 'Fair or': 'Fair', 'Poor?': 'Poor'})
nhanes_data['GeneralHealthConditionFixed'].unique()

nhanes_data = load_NHANES_data()

age_histogram = plt.hist(nhanes_data['AgeInYearsAtScreening'])

bins = np.arange(nhanes_data['AgeInYearsAtScreening'].min(), nhanes_data['AgeInYearsAtScreening'].max()+1)
age_histogram_1year_bins = plt.hist(nhanes_data['AgeInYearsAtScreening'], bins=bins)

age_density_1year_bins = plt.hist(nhanes_data['AgeInYearsAtScreening'], bins=bins, density=True)

plt.plot(age_density_1year_bins[1][1:], age_density_1year_bins[0])

oring_data = pd.read_csv('https://raw.githubusercontent.com/statsthinking21/statsthinking21-python/master/notebooks/data/orings.csv', index_col=0)

ax = sns.lineplot(x='Temperature', y='DamageIndex', data=oring_data, ci=None)
plt.xlabel('Temperature at time of launch')
plt.ylabel('Damage Index')
ax.fill_between([26, 29], 0, 12, 
                facecolor='red', alpha=0.3)
ax.text(27, 1, 'Forecasted temperature on Jan 28', rotation=90)
plt.show()

import pandas as pd
SFrain = pd.read_csv('https://raw.githubusercontent.com/statsthinking21/statsthinking21-python/master/notebooks/data/SanFranciscoRain.csv')

SFrain = SFrain.drop(columns=['STATION', 'NAME'])
SFrain

SFrain['rainToday'] = SFrain['PRCP'] > 0
SFrain

pRainInSF = SFrain['rainToday'].mean()
pRainInSF

from nhanes.load import load_NHANES_data
nhanes_data = load_NHANES_data()

nhanes_data['Over70'] = nhanes_data['AgeInYearsAtScreening'] > 70

hearing_data = nhanes_data[['Over70', 'HaveSeriousDifficultyHearing']].dropna()
hearing_data

p_over_70 = hearing_data['Over70'].mean()
p_over_70

p_hearing_problem = hearing_data['HaveSeriousDifficultyHearing'].mean()
p_hearing_problem

joint_table = pd.crosstab(hearing_data.Over70, hearing_data['HaveSeriousDifficultyHearing'], normalize=True)
joint_table

p_hearingproblem_given_over_70 = hearing_data.query('Over70 == True')['HaveSeriousDifficultyHearing'].mean()
p_hearingproblem_given_over_70

p_over_70_given_hearingproblem = hearing_data.query('HaveSeriousDifficultyHearing == True')['Over70'].mean()
p_over_70_given_hearingproblem

adult_nhanes_data = nhanes_data.query('AgeInYearsAtScreening > 17')
adult_nhanes_data = adult_nhanes_data.dropna(subset=['StandingHeightCm']).rename(columns={'StandingHeightCm': 'Height'})

adult_nhanes_data.shape[1]

!pip install nhanes
from nhanes.load import load_NHANES_data
nhanes_data = load_NHANES_data()

from nhanes.load import load_NHANES_data
nhanes_data = load_NHANES_data()
adult_nhanes_data = nhanes_data.query('AgeInYearsAtScreening > 17')
adult_nhanes_data = adult_nhanes_data.dropna(subset=['StandingHeightCm']).rename(columns={'StandingHeightCm': 'Height'})
sample_size = 50
num_samples = 5000

import pandas as pd
import numpy as np

sampling_results = pd.DataFrame({'mean': np.zeros(num_samples)})

for sample_num in range(num_samples):
    sample = adult_nhanes_data.sample(sample_size)
    sampling_results.loc[sample_num, 'mean'] = sample['Height'].mean()

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats
import seaborn as sns

hist = plt.hist(sampling_results['mean'], 100, density=True)
plt.axvline(x=adult_nhanes_data['Height'].mean(),
            ymax=np.max(hist[0]), color='k')

hist_bin_min = np.min(hist[1])
hist_bin_max = np.max(hist[1])
step_size = 0.01
x_values = np.arange(hist_bin_min, hist_bin_max, step_size)
normal_values = scipy.stats.norm.pdf(
    x_values,
    loc=sampling_results['mean'].mean(),
    scale=sampling_results['mean'].std())
plt.plot(x_values, normal_values, color='r')

plt.hist(adult_nhanes_data['AnnualFamilyIncome'])

def sample_and_return_mean(df, variable_name, 
                           sample_size=250, num_samples=5000):
   
    sampling_distribution = pd.DataFrame({'mean': np.zeros(num_samples)})
    for sample_number in range(num_samples):
        sample_df = df.sample(sample_size)
        sampling_distribution.loc[sample_number, 'mean'] = sample_df[variable_name].mean()
    return(sampling_distribution)

adult_income_data = adult_nhanes_data.dropna(subset=['AnnualFamilyIncome'])
family_income_sampling_dist = sample_and_return_mean(adult_income_data, 'AnnualFamilyIncome')
_ = plt.hist(family_income_sampling_dist['mean'], 100)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
scipy.stats.probplot(adult_income_data['AnnualFamilyIncome'], plot=sns.mpl.pyplot)
plt.title('Original data')

plt.subplot(1, 2, 2)
scipy.stats.probplot(family_income_sampling_dist['mean'], plot=sns.mpl.pyplot)
plt.title('Sampling distribution')

def get_confidence_interval(df, variable_name, ci_percent=95,sample_size=50):
    sample_df = df.sample(sample_size)
    mean = sample_df[variable_name].mean()
    std = sample_df[variable_name].std()
    sem = std / np.sqrt(sample_size)
    t_tail_proportion = 1 - ((100 - ci_percent) / 100) / 2
    t_cutoff = scipy.stats.t.ppf(t_tail_proportion, sample_size - 1)
    upper_ci = mean + sem * t_cutoff
    lower_ci = mean - sem * t_cutoff
    return([lower_ci, upper_ci])

num_runs = 1000

ci_df = pd.DataFrame({'lower': np.zeros(num_runs),
                      'upper': np.zeros(num_runs)})

for i in range(num_runs):
    ci_df.iloc[i, :] = get_confidence_interval(adult_nhanes_data,'Height')

ci_df['captures_mean'] = (ci_df['lower'] < adult_nhanes_data['Height'].mean()) * (ci_df['upper'] > adult_nhanes_data['Height'].mean())
ci_df['captures_mean'].mean()

